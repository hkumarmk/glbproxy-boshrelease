<% require "digest"%>
global
    log <%= p('ha_proxy.syslog_server') %> syslog <%= p('ha_proxy.log_level') %>
    daemon
    <% if p("ha_proxy.threads") > 1 %>
    nbproc <%= p("ha_proxy.threads") %>
    <% end %>
    user vcap
    group vcap
    maxconn 64000
    spread-checks 4
    tune.ssl.default-dh-param <%= p("ha_proxy.default_dh_param") %>
    tune.bufsize <%= p("ha_proxy.buffer_size_bytes") %>
    <% if p("ha_proxy.threads") > 1 %>
      <% 1.upto(p("ha_proxy.threads")) do |proc| %>
    stats socket /var/vcap/sys/run/haproxy/stats<%= proc%>.sock mode 600 level admin process <%= proc%>
      <% end %>
    <% else %>
    stats socket /var/vcap/sys/run/haproxy/stats.sock mode 600 level admin
    <% end %>
    stats timeout 2m
<%
    ssl_flags = "no-sslv3"
    if p("ha_proxy.disable_tls_10")
        ssl_flags = "#{ssl_flags} no-tlsv10"
    end
    if p("ha_proxy.disable_tls_11")
        ssl_flags = "#{ssl_flags} no-tlsv11"
    end
    if p("ha_proxy.disable_tls_tickets")
        ssl_flags = "#{ssl_flags} no-tls-tickets"
    end
-%>
    ssl-default-bind-options <%= ssl_flags %>
    ssl-default-bind-ciphers <%= p("ha_proxy.ssl_ciphers") %>
    ssl-default-server-options <%= ssl_flags %>
    ssl-default-server-ciphers <%= p("ha_proxy.ssl_ciphers") %>

defaults
    log global
    maxconn 64000
    option http-server-close
    option httplog
    option forwardfor
    option contstats
    timeout connect         <%= (p("ha_proxy.connect_timeout").to_f    * 1000).to_i %>ms
    timeout client          <%= (p("ha_proxy.client_timeout").to_f     * 1000).to_i %>ms
    timeout server          <%= (p("ha_proxy.server_timeout").to_f     * 1000).to_i %>ms
    timeout tunnel          <%= (p("ha_proxy.websocket_timeout").to_f  * 1000).to_i %>ms
    timeout http-keep-alive <%= (p("ha_proxy.keepalive_timeout").to_f  * 1000).to_i %>ms
    timeout http-request    <%= (p("ha_proxy.request_timeout").to_f    * 1000).to_i %>ms
    timeout queue           <%= (p("ha_proxy.queue_timeout").to_f      * 1000).to_i %>ms

<% if p("ha_proxy.stats_enable") %>
  <% stat = p("ha_proxy.stats_bind").split(':');
     stat_prefix = stat[0] + ":";
     stat_port = stat[1].to_i;
   %>
  <% 1.upto(p("ha_proxy.threads")) do |proc| %>
listen stats_<%= proc %>
    bind <%= stat_prefix %><%= stat_port + (proc - 1) %>
    bind-process <%= proc %>
    acl private src <%= p("ha_proxy.trusted_stats_cidrs") %>
    http-request deny unless private
    mode http
    stats enable
    stats hide-version
    stats realm "Haproxy Statistics"
    stats uri /<%= p("ha_proxy.stats_uri") %>
    stats auth <%= p("ha_proxy.stats_user") %>:<%= p("ha_proxy.stats_password") %>
  <% end %>
<% end %>

<% if p("ha_proxy.enable_health_check_http") %>
listen health_check_http_url
    bind :8080
    mode http
    monitor-uri /health
    acl http-routers_down nbsrv(http-routers) eq 0
    monitor fail if http-routers_down
<% end %>

<%
if_p("ha_proxy.resolvers") do |resolvers|
%>
resolvers default
    hold valid <%= p("ha_proxy.dns_hold") %>
<%
    resolvers.each do |resolver|
%>
    nameserver <%= resolver.keys[0] %> <%= resolver.values[0] %>:53
<%
  end
end
%>

# Single VIP with sni content switching
frontend apps
  bind :443
  mode tcp
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
{{- if keyExists "glb_proxy/default_app@master" }}
  default_backend bk-default
{{- end }}
{{- range ls "glb_proxy/apps@master" }}
  acl {{ .Key }} req_ssl_sni -i {{ .Key }}.mastercard.com
  use_backend bk-{{ .Key }} if {{ .Key }}
{{- end }}
{{- range $app := ls "glb_proxy/apps@master" }}
backend bk-{{ $app.Key }}
  mode tcp
  balance roundrobin
  stick-table type binary len 32 size 30k expire 30m
  acl clienthello req_ssl_hello_type 1
  acl serverhello rep_ssl_hello_type 2
  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  stick store-response payload_lv(43,1) if serverhello
  option ssl-hello-chk
{{- range $dc := ls "glb_proxy/datacenters@master" }}
{{- with node }}
{{- if eq .Node.Datacenter $dc.Key }}
  server {{ $dc.Key }} {{ $app.Key }}.{{ $dc.Key }}.mastercard.com:443 check
{{- else }}
  server {{ $dc.Key }} {{ $app.Key }}.{{ $dc.Key }}.mastercard.com:443 check backup
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if keyExists "glb_proxy/default_app@master" }}
backend bk-default
  mode tcp
  balance roundrobin
  stick-table type binary len 32 size 30k expire 30m
  acl clienthello req_ssl_hello_type 1
  acl serverhello rep_ssl_hello_type 2
  tcp-request inspect-delay 5s
  tcp-request content accept if clienthello
  tcp-response content accept if serverhello
  stick on payload_lv(43,1) if clienthello
  stick store-response payload_lv(43,1) if serverhello
  option ssl-hello-chk
{{- range $dc := ls "glb_proxy/datacenters@master" }}
{{- with node }}
{{- if eq .Node.Datacenter $dc.Key }}
  server {{ $dc.Key }} default-app.{{ $dc.Key }}.mastercard.com:443 check
{{- else }}
  server {{ $dc.Key }} default-app.{{ $dc.Key }}.mastercard.com:443 check backup
{{- end }}
{{- end }}
{{- end }}
{{- end }}
